# Workflow to build USD versions required to run the usd plugins
# this assumes there is a Release created called USD Artifacts
name: Create USD Release

on:
  workflow_dispatch:
    inputs:
      usdVersion:
        description: 'USD Version to build (e.g., 2308, 2403)'
        required: true
        default: '2308'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest] # os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Check if artifact exists in 'USD-${{ github.event.inputs.usdVersion }}-Artifacts' Release
        id: check_artifact
        shell: pwsh
        run: |
          $usdVersion="${{ github.event.inputs.usdVersion }}"
          $usdFormattedVersion="$($usdVersion.Substring(0,2)).$($usdVersion.Substring(2))"
          "USD_FORMATTED_VERSION=$usdFormattedVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
          $ASSET_NAME="usd-${{ github.event.inputs.usdVersion }}-${{ matrix.os }}.zip"
          $releaseExists = $true
          try {
            gh release view USDArtifact --repo ${{ github.repository }}
          } catch {
            Write-Output "'USDArtifact' release not found. Assuming artifact does not exist."
            "exists=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            $releaseExists = $false
          }
          if ($releaseExists) {
            $releaseName="USD-${{ github.event.inputs.usdVersion }}-Artifacts"
            $assets = gh release view $releaseName --repo ${{ github.repository }} --json assets -q '.assets[].name'
            if ($assets -like "*$ASSET_NAME*") {
              Write-Output "Asset $ASSET_NAME exists in the $releaseName Release."
              "exists=true" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Output "Asset $ASSET_NAME does not exist in the $releaseName Release."
              "exists=false" | Out-File -FilePath $env:GITHUB_ENV -Append
            }
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        if: env.exists == 'false'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
        id: setup-python

      - name: Install Ninja (Cross-platform)
        if: env.exists == 'false'
        run: |
          python -m pip install ninja

      - name: Install Additional Dependencies (macOS)
        if: env.exists == 'false' && matrix.os == 'macos-latest'
        run: |
          sudo xcode-select -s /Applications/Xcode_13.1.app
          brew install glew openexr3 imath

      - name: Install Additional Dependencies (Ubuntu)
        if: env.exists == 'false' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgl1-mesa-dev libglew-dev libxi-dev libxrandr-dev

      - name: Install Additional Dependencies (Windows)
        if: env.exists == 'false' && matrix.os == 'windows-latest'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Clone USD
        if: env.exists == 'false'
        run: git clone --branch v${{ env.USD_FORMATTED_VERSION }} --depth 1 https://github.com/PixarAnimationStudios/OpenUSD.git

      - name: Install Python Dependencies
        if: env.exists == 'false'
        run: |
          python -m pip install PySide6
          python -m pip install pyopengl

      - name: Build USD with Ninja
        if: env.exists == 'false'
        run: |
          python OpenUSD/build_scripts/build_usd.py ${{ github.workspace }}/usd_build --openimageio --build-variant release --generator "Ninja" --build-target universal

      - name: Package Build Artifacts Unix
        if: env.exists == 'false' && matrix.os != 'windows-latest'
        run: |
          zip -r usd-${{ github.event.inputs.usdVersion }}-${{ matrix.os }}.zip ${{ github.workspace }}/usd_build

      - name: Package Build Artifacts Windows
        if: env.exists == 'false' && matrix.os == 'windows-latest'
        run: |
          powershell -Command "Compress-Archive -Path ${{ github.workspace }}\usd_build\* -DestinationPath usd-${{ github.event.inputs.usdVersion }}-${{ matrix.os }}.zip"

      - name: Upload Artifact to USD-${{ github.event.inputs.usdVersion }}-Artifacts Release
        if: env.exists == 'false'
        shell: pwsh
        run: |
          $ARTIFACT_PATH="${{ github.workspace }}/usd-${{ github.event.inputs.usdVersion }}-${{ matrix.os }}.zip"
          if (-Not (Test-Path $ARTIFACT_PATH)) {
            Write-Output "$ARTIFACT_PATH does not exist."
          }
          else {
            Write-Output "File $ARTIFACT_PATH exists."
            Write-Output "Size of the artifact file:"
            Get-Item $ARTIFACT_PATH | Select-Object Name, Length
          }
          Write-Output "Uploading $ARTIFACT_PATH to USD-${{github.event.inputs.usdVersion}}-Artifacts release..."
          gh release upload USD-${{ github.event.inputs.usdVersion }}-Artifacts $ARTIFACT_PATH --repo ${{ github.repository }} --clobber
          Write-Output "Upload successful."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
